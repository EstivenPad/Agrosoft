@page "/ConsultaCobros"

@using Models
@using BLL

@inject IToastService toast;

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <div class="card border-success">
        <div class="card-header bg-success text-lg-center" style="border-radius:5px;">
            <h3 style="font-family:Georgia; color:white">Consulta de cobros</h3>
        </div>

        <div class="card-body">
            <div class="row">
                @*Desde*@
                <div class="form-group col-2">
                    <label>Desde</label>
                    <input type="date" class="form-control" @bind="Desde" />
                </div>

                @*Hasta*@
                <div class="form-group col-2">
                    <label>Hasta</label>
                    <input type="date" class="form-control" @bind="Hasta" />
                </div>

                @*Filtro*@
                <div class="form-group col-3">
                    <label>Filtro</label>
                    <select @bind="filtro" class="form-control">
                        <option value="0" disabled>Elija una opción</option>
                        <option value="1">Todo</option>
                        <option value="2">Código cobro</option>
                        <option value="3">Código cliente</option>
                        <option value="4">Código usuario</option>
                        <option value="5">Balance</option>
                        <option value="6">Límite de crédito</option>
                    </select>
                </div>

                @*Criterio*@
                <div class="form-group col">
                    <label>Criterio</label>
                    <div class="input-group">
                        <input type="text" @bind="criterio" class="form-control" />
                        <div class="input-group-append">
                            <button type="button" class="btn btn-primary input-group-text" @onclick="Consultar">
                                <span class="oi oi-magnifying-glass" aria-hidden="true"></span>Consultar
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @*Tabla*@
            <table class="table table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Código</th>
                        <th>Fecha</th>
                        <th>Cliente</th>
                        <th>Depósito</th>
                        <th>Usuario</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var cobro in ListaCobros)
                    {
                        <tr>
                            <td>@cobro.CobrosId</td>
                            <td>@cobro.Fecha</td>
                            <td>@repositorioClientes.Buscar(cobro.ClienteId).Nombres</td>
                            <td>@cobro.Deposito</td>
                            <td>@repositorioUsuarios.Buscar(cobro.UsuarioId).NombreUsuario</td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </div>
}
else @*Si no ha iniciado sesion*@
{
    <div class="card border-dark text-center">
        <div class="card-header bg-danger text-lg-center" style="border-radius:5px;">
            <h4 style="font-family:Georgia; color:white">No inicio de sesión</h4>
        </div>
        <div class="card-body">
            <h5><span class="fa fa-exclamation-triangle"></span> &nbsp; Atención</h5>
            <p>¡Debe iniciar sesión para poder tener acceso!</p>
            <a href="/" class="btn btn-outline-warning">Volver al inicio</a>
        </div>
    </div>
}

@code {
    List<Cobros> ListaCobros = new List<Cobros>();
    RepositorioBase<Cobros> repositorioCobros = new RepositorioBase<Cobros>();
    RepositorioBase<Clientes> repositorioClientes = new RepositorioBase<Clientes>();
    RepositorioBase<Usuarios> repositorioUsuarios = new RepositorioBase<Usuarios>();

    private int filtro;
    private string criterio;
    private DateTime Desde = DateTime.Now;
    private DateTime Hasta = DateTime.Now;

    private void Consultar()
    {
        if (string.IsNullOrWhiteSpace(criterio))
        {
            ListaCobros = repositorioCobros.GetList(x => true);
            ListaCobros = ListaCobros.Where(c => c.Fecha.Date >= Desde.Date && c.Fecha.Date <= Hasta.Date).ToList();

            if (ListaCobros.Count == 0)
            {
                toast.ShowInfo("¡No hay datos para mostrar!");
            }
        }
        else
        {
            switch (filtro)
            {
                case 0:
                    toast.ShowError("¡Opción incorrecta!");
                    break;
                case 1:
                    ListaCobros = repositorioCobros.GetList(x => true);
                    break;
                case 2:
                    int id = Convert.ToInt32(criterio);
                    ListaCobros = repositorioCobros.GetList(x => x.CobrosId == id);
                    break;
                case 3:
                    int clienteId = Convert.ToInt32(criterio);
                    ListaCobros = repositorioCobros.GetList(x => x.ClienteId == clienteId);
                    break;
                case 4:
                    int usuarioId = Convert.ToInt32(criterio);
                    ListaCobros = repositorioCobros.GetList(x => x.UsuarioId == usuarioId);
                    break;

            }
            ListaCobros = ListaCobros.Where(c => c.Fecha.Date >= Desde.Date && c.Fecha.Date <= Hasta.Date).ToList();
            if (ListaCobros.Count == 0)
            {
                toast.ShowInfo("¡No hay datos para mostrar!");
            }
        }
    }
}