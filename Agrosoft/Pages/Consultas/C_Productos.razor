@page "/ConsultaProductos"

@using Models
@using BLL
@using iTextSharpBlazor.Reportes
@using Agrosoft.Pages.Viewers

@inject IToastService toast
@inject IModalService modal

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <div class="card border-success">
        <div class="card-header bg-success text-lg-center" style="border-radius:5px;">
            <h3 style="font-family:Georgia; color:white">Consulta de productos</h3>
        </div>

        <div class="card-body">
            <div class="row">
                @*Filtro*@
                <div class="form-group col">
                    <label>Filtro</label>
                    <select @bind="filtro" class="form-control">
                        <option value="0" disabled>Seleccione una opción</option>
                        <option value="1">Código</option>
                        <option value="2">Nombre</option>
                        <option value="3">Marca</option>
                    </select>
                </div>

                @*Criterio*@
                <div class="form-group col">
                    <label>Criterio</label>
                    <div class="input-group">
                        <input type="text" @bind="criterio" class="form-control" />
                        <div class="input-group-append">
                            <button type="button" class="btn btn-primary input-group-text" @onclick="@(c => Consultar(0))">
                                <span class="oi oi-magnifying-glass" aria-hidden="true"></span>Consultar
                            </button>

                            &nbsp;

                            <button class="btn btn-outline-primary" @onclick="GenerarReporte">
                                <span class="oi oi-print" aria-hidden="true"></span>  Imprimir
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @*Tabla*@
            <table class="table table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Código</th>
                        <th>Nombre</th>
                        <th>Marca</th>
                        <th>Cantidad minima</th>
                        <th>Cantidad existente</th>
                        <th>Precio</th>
                        <th>Costo</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var articulo in Lista)
                    {
                        <tr>
                            <td>@articulo.ProductoId</td>
                            <td>@articulo.Nombre</td>
                            <td>@articulo.Marca</td>
                            <td>@articulo.CantidadMinima</td>
                            <td>@articulo.CantidadExistente</td>
                            <td>@articulo.Precio.ToString("N2")</td>
                            <td>@articulo.Costo.ToString("N2")</td>
                        </tr>
                    }
                </tbody>
            </table>

            @*Total*@
            <div class="card-footer">
                <div class="row">
                    <div class="text-left col-3">
                        <label>Total de productos: @Total</label>
                    </div>

                    <div style="margin-left:auto; margin-right:auto;">
                        <button type="button" class="btn btn-lg btn-warning" @onclick="GenerarReporteProductosReorden" style="font-size: 14px;"> 
                            <span class="oi oi-print" style="font-size: 14px"></span> Imprimir reporte de productos en reorden 
                        </button>
                    </div>

                    <div class="text-lg-right col-3">
                        <label>@("Página" + " "+(paginaActual+1) + " " + "de" + " " + totalPaginas)</label>
                    </div>
                </div>
            </div>

            @*Paginacion*@
            <div class="card-footer bg-success">
                <div class="form-group text-center" display: inline-block>
                    <nav aria-label="Page navigation example">
                        <ul class="pagination justify-content-center">
                            <li class="page-item">
                                <button class="page-link btn btn-success" @onclick="@(e => Direccionar("Primero"))" tabindex="-1">
                                    <span class="fa fa-backward"></span>
                                </button>
                            </li>

                            <li class="page-item">
                                <button class="page-link btn btn-success" @onclick="@(e => Direccionar("Anterior"))" tabindex="-1">
                                    <span class="oi oi-caret-left" style="font-size:15px"></span>
                                </button>
                            </li>

                            @for (int i = 0; i < totalPaginas; i++)
                            {
                                var pageNumber = i;
                                <li class="page-item">
                                    <button class="@(paginaActual == pageNumber ? "page-link btn btn-dark" : "page-link btn btn-success")"
                                            @onclick="@(u => Consultar(pageNumber))">
                                        @(i + 1)
                                    </button>
                                </li>
                            }

                            <li class="page-item">
                                <button type="button" class="page-link btn btn-success" @onclick="@(e => Direccionar("Siguiente"))" tabindex="-1">
                                    <span class="oi oi-caret-right" style="font-size:15px"></span>
                                </button>
                            </li>

                            <li class="page-item">
                                <button class="page-link btn btn-success" @onclick="@(e => Direccionar("Ultimo"))" tabindex="-1">
                                    <span class="fa fa-forward"></span>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>

        </div>
    </div>
}
else @*Si no ha iniciado sesion*@
{
    <div class="card border-dark text-center">
        <div class="card-header bg-danger text-lg-center" style="border-radius:5px;">
            <h4 style="font-family:Georgia; color:white">No inicio de sesión</h4>
        </div>
        <div class="card-body">
            <h5><span class="fa fa-exclamation-triangle"></span> &nbsp; Atención</h5>
            <p>¡Debe iniciar sesión para poder tener acceso!</p>
            <a href="/" class="btn btn-outline-warning">Volver al inicio</a>
        </div>
    </div>
}

@code {
    List<Productos> ListaProductos = new List<Productos>();
    List<Productos> Lista = new List<Productos>();
    List<Productos> ListaProductosReorden = new List<Productos>();
    RepositorioBase<Productos> repositorioProductos = new RepositorioBase<Productos>();

    private int filtro;
    private string criterio;
    private int cantidadPorPaginas = 6;
    private int totalPaginas;
    private int paginaActual;
    private int Total;

    private void ActualizarLista(int numeroPagina)
    {
        Lista = ListaProductos.Skip(numeroPagina * cantidadPorPaginas).Take(cantidadPorPaginas).ToList();
        paginaActual = numeroPagina;
    }

    private void Direccionar(string direccion)
    {
        if (direccion == "Anterior" && paginaActual != 0)
            paginaActual--;
        if (direccion == "Siguiente" && paginaActual != totalPaginas)
        {
            paginaActual++;
            if (paginaActual == totalPaginas)
                paginaActual--;
        }

        if (direccion == "Primero")
            paginaActual = 0;

        if (direccion == "Ultimo")
            paginaActual = totalPaginas - 1;

        ActualizarLista(paginaActual);
    }

    public void calcularTotal()
    {
        Total = 0;

        foreach (var item in ListaProductos)
        {
            Total++;
        }
    }

    private void Consultar(int pagina)
    {
        if (string.IsNullOrWhiteSpace(criterio))
        {
            ListaProductos = repositorioProductos.GetList(x => true);
            totalPaginas = (int)Math.Ceiling(ListaProductos.Count() / (decimal)cantidadPorPaginas);
            ActualizarLista(paginaActual);

            calcularTotal();

            if (Lista.Count == 0)
            {
                toast.ShowInfo("¡No hay datos para mostrar!");
            }
        }
        else
        {
            switch (filtro)
            {
                case 0:
                    toast.ShowError("¡Opcion inválida!");
                    break;
                case 1:
                    int id = Convert.ToInt32(criterio);
                    ListaProductos = repositorioProductos.GetList(x => x.ProductoId == id);
                    totalPaginas = (int)Math.Ceiling(ListaProductos.Count() / (decimal)cantidadPorPaginas);
                    ActualizarLista(pagina);
                    break;
                case 2:
                    ListaProductos = repositorioProductos.GetList(x => x.Nombre == criterio);
                    totalPaginas = (int)Math.Ceiling(ListaProductos.Count() / (decimal)cantidadPorPaginas);
                    ActualizarLista(pagina);
                    break;
                case 3:
                    ListaProductos = repositorioProductos.GetList(x => x.Marca == criterio);
                    totalPaginas = (int)Math.Ceiling(ListaProductos.Count() / (decimal)cantidadPorPaginas);
                    ActualizarLista(pagina);
                    break;
            }
            calcularTotal();

            if (Lista.Count == 0)
            {
                toast.ShowInfo("¡No hay datos para mostrar!");
            }
        }
    }

    public void GenerarReporte()
    {
        ProductosReport productosReport = new ProductosReport();
        var parametros = new ModalParameters();

        if (Lista.Count == 0)
        {
            toast.ShowInfo("¡No hay datos para imprimir!");
            return;
        }

        parametros.Add("listaProductos", ListaProductos);

        modal.Show<ProductosViewer>("Reporte de Productos", parametros);
    }

    public void GenerarReporteProductosReorden()
    {
        ListaProductosReorden = ProductosBLL.GetProductosEnReorden();
        ProductosReport productosReport = new ProductosReport();
        var parametros = new ModalParameters();

        if (ListaProductosReorden.Count == 0)
        {
            toast.ShowInfo("¡No hay datos para imprimir!");
            return;
        }

        parametros.Add("listaProductos", ListaProductosReorden);

        modal.Show<ProductosViewer>("Reporte de productos en reorden", parametros);
    }
}