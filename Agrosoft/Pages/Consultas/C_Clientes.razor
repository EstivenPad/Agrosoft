@page "/ConsultaClientes"

@using BLL
@using Models
@using iTextSharpBlazor.Reportes
@using Agrosoft.Pages.Viewers

@inject IToastService toast
@inject IModalService modal

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <div class="card border-success">
        <div class="card-header bg-success text-lg-center" style="border-radius:5px;">
            <h3 style="font-family:Georgia; color:white">Consulta de clientes</h3>
        </div>

        <div class="card-body">
            <div class="row">
                @*Desde*@
                <div class="form-group col-2">
                    <label>Desde</label>
                    <input type="date" class="form-control" @bind="Desde" />
                </div>

                @*Hasta*@
                <div class="form-group col-2">
                    <label>Hasta</label>
                    <input type="date" class="form-control" @bind="Hasta" />
                </div>

                @*Filtro*@
                <div class="form-group col-3">
                    <label>Filtro</label>
                    <select @bind="Filtro" class="form-control">
                        <option value="0" disabled>Seleccione una opción</option>
                        <option value="1">Código</option>
                        <option value="2">Nombres</option>
                        <option value="3">Apellidos</option>
                        <option value="4">Balance</option>
                        <option value="5">Límite de crédito</option>
                    </select>
                </div>

                @*Criterio*@
                <div class="form-group col">
                    <label>Criterio</label>
                    <div class="input-group">
                        <input type="text" @bind="Criterio" class="form-control" />
                        <div class="input-group-append">
                            <button type="button" class="btn btn-primary input-group-text" @onclick="@(c => Consultar(0))">
                                <span class="oi oi-magnifying-glass" aria-hidden="true"></span>Consultar
                            </button>

                            &nbsp;

                            <button class="btn btn-outline-primary" @onclick="GenerarReporte">
                                <span class="oi oi-print" aria-hidden="true"></span>  Imprimir
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @*Tabla*@
            <table class="table table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Código</th>
                        <th>Fecha</th>
                        <th>Nombres</th>
                        <th>Apellidos</th>
                        <th>Cédula</th>
                        <th>Celular</th>
                        <th>Crédito</th>
                        <th>Balance</th>
                        <th>Usuario</th>
                    </tr>
                </thead>

                @foreach (var item in Lista)
                {
                    <tr>
                        <td>@item.ClienteId</td>
                        <td>@item.Fecha.ToString("dd/MM/yyyy")</td>
                        <td>@item.Nombres</td>
                        <td>@item.Apellidos</td>
                        <td>@item.Cedula</td>
                        <td>@item.Celular</td>
                        <td>@item.LimiteCredito.ToString("N2")</td>
                        <td>@item.Balance.ToString("N2")</td>
                        <td>@repositorioUsuarios.Buscar(item.UsuarioId).NombreUsuario</td>
                    </tr>
                }
            </table>

            @*Total*@
            <div class="card-footer">
                <div class="row">
                    <div class="text-left col-3">
                        <label>Total de clientes: @Total</label>
                    </div>

                    <div style="margin-left:auto; margin-right:auto;">
                        <button type="button" class="btn btn-lg btn-warning" @onclick="GenerarReporteClientesConDeudas" style="font-size: 14px;">
                            <span class="oi oi-print" style="font-size: 14px"></span> Imprimir reporte de clientes con deudas
                        </button>
                    </div>

                    <div class="text-lg-right col-3">
                        <label>@("Página" + " "+(paginaActual+1) + " " + "de" + " " + totalPaginas)</label>
                    </div>
                </div>
            </div>

            @*Paginacion*@
            <div class="card-footer bg-success">
                <div class="form-group text-center" display: inline-block>
                    <nav aria-label="Page navigation example">
                        <ul class="pagination justify-content-center">
                            <li class="page-item">
                                <button class="page-link btn btn-success" @onclick="@(e => Direccionar("Primero"))" tabindex="-1">
                                    <span class="fa fa-backward"></span>
                                </button>
                            </li>

                            <li class="page-item">
                                <button class="page-link btn btn-success" @onclick="@(e => Direccionar("Anterior"))" tabindex="-1">
                                    <span class="oi oi-caret-left" style="font-size:15px"></span>
                                </button>
                            </li>

                            @for (int i = 0; i < totalPaginas; i++)
                            {
                                var pageNumber = i;
                                <li class="page-item">
                                    <button class="@(paginaActual == pageNumber ? "page-link btn btn-dark" : "page-link btn btn-success")"
                                            @onclick="@(u => Consultar(pageNumber))">
                                        @(i + 1)
                                    </button>
                                </li>
                            }

                            <li class="page-item">
                                <button type="button" class="page-link btn btn-success" @onclick="@(e => Direccionar("Siguiente"))" tabindex="-1">
                                    <span class="oi oi-caret-right" style="font-size:15px"></span>
                                </button>
                            </li>

                            <li class="page-item">
                                <button class="page-link btn btn-success" @onclick="@(e => Direccionar("Ultimo"))" tabindex="-1">
                                    <span class="fa fa-forward"></span>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>

        </div>
    </div>
}
else @*Si no ha iniciado sesion*@
{
    <div class="card card-shadow text-center">
        <div class="card-header bg-danger text-lg-center" style="border-radius:5px; width:100%">
            <h3 style="font-family:Georgia; color:white">No inicio de sesión</h3>
        </div>
        <div class="card-body" style="margin-top:25%">
            <h4>
                <span class="fa fa-exclamation-triangle" style="color:#ffcc00; font-size:25px"></span> &nbsp; Atención &nbsp;
                <span class="fa fa-exclamation-triangle" style="color:#ffcc00; font-size:25px"></span>
            </h4>
            <h6>¡Debe iniciar sesión para poder tener acceso!</h6>
            
        </div>
        <div class="card card-footer" style="width:100%;">
            <a href="LogInPage" class="btn btn-outline-info" style="border-radius: 10px">
                <span class="fa fa-sign-in-alt"></span> Ir al login
            </a>
        </div>
    </div>
}

@code {
    private List<Clientes> ListaClientes = new List<Clientes>();
    private List<Clientes> Lista = new List<Clientes>();
    private List<Clientes> ListaClientesConDeuda = new List<Clientes>();
    public RepositorioBase<Clientes> repositorioClientes = new RepositorioBase<Clientes>();
    RepositorioBase<Usuarios> repositorioUsuarios = new RepositorioBase<Usuarios>();

    public int Total { get; set; }
    public int Filtro { get; set; }
    public string Criterio { get; set; }
    private DateTime Desde = DateTime.Now;
    private DateTime Hasta = DateTime.Now;
    private int cantidadPorPaginas = 6;
    private int totalPaginas;
    private int paginaActual;

    private void ActualizarLista(int numeroPagina)
    {
        Lista = ListaClientes.Skip(numeroPagina * cantidadPorPaginas).Take(cantidadPorPaginas).ToList();
        paginaActual = numeroPagina;
    }

    private void AplicarRangoFechas()
    {
        ListaClientes = ListaClientes.Where(c => c.Fecha.Date >= Desde.Date && c.Fecha.Date <= Hasta.Date).ToList();
    }

    private void Direccionar(string direccion)
    {
        if (direccion == "Anterior" && paginaActual != 0)
            paginaActual--;
        if (direccion == "Siguiente" && paginaActual != totalPaginas)
        {
            paginaActual++;
            if (paginaActual == totalPaginas)
                paginaActual--;
        }

        if (direccion == "Primero")
            paginaActual = 0;

        if (direccion == "Ultimo")
            paginaActual = totalPaginas - 1;

        ActualizarLista(paginaActual);
    }

    public void Consultar(int pagina)
    {
        if (string.IsNullOrWhiteSpace(Criterio))
        {
            ListaClientes = repositorioClientes.GetList(x => true);
            totalPaginas = (int)Math.Ceiling(ListaClientes.Count() / (decimal)cantidadPorPaginas);
            ActualizarLista(pagina);

            calcularTotal();

            if (Lista.Count == 0)
            {
                toast.ShowInfo("¡No hay datos para mostrar!");
            }
        }
        else
        {
            switch (Filtro)
            {
                case 0:
                    toast.ShowError("¡Opcion inválida!");
                    break;
                case 1:
                    int id = Convert.ToInt32(Criterio);
                    ListaClientes = repositorioClientes.GetList(c => c.ClienteId == id);
                    totalPaginas = (int)Math.Ceiling(ListaClientes.Count() / (decimal)cantidadPorPaginas);
                    ActualizarLista(pagina);
                    break;
                case 2:
                    ListaClientes = repositorioClientes.GetList(c => c.Nombres.Contains(Criterio));
                    AplicarRangoFechas();
                    totalPaginas = (int)Math.Ceiling(ListaClientes.Count() / (decimal)cantidadPorPaginas);
                    ActualizarLista(pagina);
                    break;
                case 3:
                    ListaClientes = repositorioClientes.GetList(c => c.Apellidos.Contains(Criterio));
                    AplicarRangoFechas();
                    totalPaginas = (int)Math.Ceiling(ListaClientes.Count() / (decimal)cantidadPorPaginas);
                    ActualizarLista(pagina);
                    break;
                case 4:
                    decimal balance = Convert.ToDecimal(Criterio);
                    ListaClientes = repositorioClientes.GetList(c => c.Balance == balance);
                    AplicarRangoFechas();
                    totalPaginas = (int)Math.Ceiling(ListaClientes.Count() / (decimal)cantidadPorPaginas);
                    ActualizarLista(pagina);
                    break;
                case 5:
                    decimal limiteCredito = Convert.ToDecimal(Criterio);
                    ListaClientes = repositorioClientes.GetList(c => c.Balance == limiteCredito);
                    AplicarRangoFechas();
                    totalPaginas = (int)Math.Ceiling(ListaClientes.Count() / (decimal)cantidadPorPaginas);
                    ActualizarLista(pagina);
                    break;
            }
            calcularTotal();

            if (Lista.Count == 0)
            {
                toast.ShowInfo("¡No hay datos para mostrar!");
            }
        }
    }

    public void calcularTotal()
    {
        Total = 0;

        foreach (var item in ListaClientes)
        {
            Total++;
        }
    }

    public void GenerarReporte()
    {
        ClientesReport clienteReport = new ClientesReport();
        var parametros = new ModalParameters();

        if (Lista.Count == 0)
        {
            toast.ShowInfo("¡No hay datos para imprimir!");
            return;
        }

        parametros.Add("listaClientes", ListaClientes);

        modal.Show<ClientesViewer>("Reporte de Clientes", parametros);
    }

    public void GenerarReporteClientesConDeudas()
    {
        ListaClientesConDeuda = ClientesBLL.GetClientesConDeudas();
        ClientesReport clienteReport = new ClientesReport();
        var parametros = new ModalParameters();

        if (ListaClientesConDeuda.Count == 0)
        {
            toast.ShowInfo("¡No hay datos para imprimir!");
            return;
        }

        parametros.Add("listaClientes", ListaClientesConDeuda);

        modal.Show<ClientesViewer>("Reporte de clientes con deudas", parametros);
    }
}
