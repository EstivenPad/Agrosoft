@page "/RegistroVentaProductos"
@page "/RegistroVentaProductos/{VentaId:int}"

@using BLL
@using Models
@using iTextSharpBlazor.Reportes
@using Agrosoft.Pages.Viewers

@inject IToastService toast
@inject IModalService modal

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <EditForm Model="Venta" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card border-success mb-3">
            <div class="card-header bg-success text-lg-center" style="border-radius:5px;">
                <h3 style="font-family:Georgia; color:white">Registro de ventas</h3>
            </div>

            <div class="card-body">
                <form>
                    <div class="row">
                        @*Venta Id*@
                        <div class="form-group col-6">
                            <label>Venta Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Venta.VentaId" min="0" class="form-control"> </InputNumber>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                        <span class="oi oi-magnifying-glass" aria-hidden="true"></span>Buscar
                                    </button>
                                </div>
                            </div>
                        </div>

                        @*Tipo de Factura*@
                        <div class="form-group col-3">
                            <label>Tipo de factura</label>
                            <select class="form-control" @bind="Venta.TipoFactura" @onfocusout="identificarTipoFactura">
                                <option value="0" selected disabled>Seleccione un tipo de factura</option>
                                <option value="1">A crédito</option>
                                <option value="2">Al contado</option>
                            </select>
                            <ValidationMessage For="@(() => Venta.TipoFactura)" />
                        </div>

                        @*Fecha*@
                        <div class="form-group col-3">
                            <label>Fecha</label>
                            <InputDate @bind-Value="Venta.Fecha" class="form-control" />
                            <ValidationMessage For="@(() => Venta.Fecha)" />
                        </div>
                    </div>
                    @if (esAContado)//Si la factura es a contado
                    {
                        @*Cliente*@
                        <div class="form-group">
                            <label>Cliente</label>
                            <div class="input-group">
                                <select class="form-control" @bind="Venta.ClienteId" @onfocusout="BuscarBalanceLimiteCredito">
                                    <option value="0" selected disabled>Seleccione un cliente</option>
                                    <option value="1">@(repositorioClientes.Buscar(1).Nombres + " " + repositorioClientes.Buscar(1).Apellidos)</option>
                                </select>
                                <div class="input-group-append">
                                    <NavLink type="button" class="btn btn-primary" href="RegistroClientes">
                                        <i class="oi oi-plus" aria-hidden="true" />
                                    </NavLink>
                                </div>
                            </div>
                            <ValidationMessage For="@(() => Venta.ClienteId)" />
                        </div>
                    }
                    else//Si la factura es a credito
                    {
                        <div class="form-row">
                            @*Cliente*@
                            <div class="form-group col-6">
                                <label>Cliente</label>
                                <div class="input-group">
                                    <select class="form-control" @bind="Venta.ClienteId" @onfocusout="BuscarBalanceLimiteCredito">
                                        <option value="0" selected disabled>Seleccione un cliente</option>

                                        @foreach (var item in ListaClientes)
                                        {
                                            <option value="@item.ClienteId">@(item.Nombres + " " + item.Apellidos)</option>
                                        }
                                    </select>
                                    <div class="input-group-append">
                                        <NavLink type="button" class="btn btn-primary" href="RegistroClientes">
                                            <i class="oi oi-plus" aria-hidden="true" />
                                        </NavLink>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => Venta.ClienteId)" />
                            </div>

                            @*Balance*@
                            <div class="col-3 form-group">
                                <label>Balance</label>
                                <InputNumber @bind-Value="Balance" class="form-control" readOnly="true" />
                            </div>

                            @*Limite de crédito*@
                            <div class="col-3 form-group">
                                <label>Limite de crédito</label>
                                <InputNumber @bind-Value="LimiteCredito" class="form-control" readOnly="true" />
                            </div>
                        </div>
                    }


                    @*Detalle*@
                    <div class="card border-dark">
                        <div class="card-header-tabs text-center mt-2">
                            <h5 style="font-family:Georgia; font-style:unset">Productos</h5>
                        </div>

                        <div class="card-body">
                            <div class="row">
                                @*Producto*@
                                <div class="form-group col">
                                    <label>Producto</label>
                                    <div class="input-group">
                                        <select class="form-control" @bind="Detalle.ProductoId" @onfocusout="LlenarPrecioUnitario">
                                            <option value="0" disabled>Seleccione una opcion</option>
                                            @foreach (var item in ListaProductos)
                                            {
                                                <option value="@item.ProductoId">@(item.Nombre + " " + item.Marca + " " + repositorioUnidadesMedida.Buscar(item.UnidadMedida).Descripcion)</option>
                                            }
                                        </select>
                                        <div class="input-group-append">
                                            <NavLink type="button" class="btn btn-primary" href="RegistroProductos">
                                                <i class="oi oi-plus" aria-hidden="true" />
                                            </NavLink>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                @*Cantidad*@
                                <div class="form-group col">
                                    <label>Cantidad</label>
                                    <InputNumber @bind-Value="Detalle.Cantidad" min="0" class="form-control" @onfocusout="CalcularImporte" />
                                </div>

                                @*Costo*@
                                <div class="form-group col">
                                    <label>Costo</label>
                                    <InputNumber @bind-Value="Detalle.PrecioUnitario" min="0" class="form-control" @onfocusout="CalcularImporte" readOnly="true" />
                                </div>

                                @*Importe*@
                                <div class="form-group col">
                                    <label>Importe</label>
                                    <div class="input-group">
                                        <InputNumber @bind-Value="Detalle.Importe" class="form-control" readOnly="true" />
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-outline-info" @onclick="AgregarDetalle">
                                                <i class="oi oi-plus" aria-hidden="true" /> Agregar
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <table class="table table-hover mt-3">
                        <thead class="thead-dark">
                            <tr>
                                <th>Producto</th>
                                <th>Cantidad</th>
                                <th>Precio Unitario</th>
                                <th>ITBIS</th>
                                <th>Importe</th>
                                <th>Opción</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in Venta.VentaProductosDetalle)
                            {
                                <tr>
                                    <td>@repositorioProductos.Buscar(item.ProductoId).Nombre</td>
                                    <td>@item.Cantidad</td>
                                    <td>@item.PrecioUnitario.ToString("N2")</td>
                                    <td>@item.ITBIS</td>
                                    <td>@item.Importe.ToString("N2")</td>
                                    <td><button type="button" class="btn btn-outline-danger" @onclick="(() => RemoverFila(item))">Remover</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <div class="card-footer">
                        @*Sub-Total*@
                        <div class="form-group">
                            <label>Sub-Total: </label>
                            <InputNumber @bind-Value="Venta.Subtotal" readOnly="true" style="background-color:transparent; border:0" />
                            <ValidationMessage For="@(() => Venta.Total)" />
                        </div>

                        @*ITBIS*@
                        <div class="form-group">
                            <label>ITBIS: </label>
                            <InputNumber @bind-Value="Venta.ITBIS" readOnly="true" style="background-color:transparent; border:0" />
                            <ValidationMessage For="@(() => Venta.Total)" />
                        </div>

                        @*Total*@
                        <div class="form-group">
                            <label>Monto total: </label>
                            <InputNumber @bind-Value="Venta.Total" readOnly="true" style="background-color:transparent; border:0" />
                            <ValidationMessage For="@(() => Venta.Total)" />
                        </div>
                    </div>                    
                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"> <span class="oi oi-file"></span> Nuevo </button>
                    <button type="submit" class="btn btn-lg btn-success"> <span class="oi oi-cloud"></span> Guardar </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"> <span class="oi oi-trash"></span> Eliminar </button>
                    <button type="button" class="btn btn-lg btn-warning" @onclick="Imprimir"> <span class="oi oi-print"></span> Imprimir </button>
                </div>
            </div>
        </div>
    </EditForm>
}
else @*Si no ha iniciado sesion*@
{
    <div class="card border-dark text-center">
        <div class="card-header bg-danger text-lg-center" style="border-radius:5px;">
            <h4 style="font-family:Georgia; color:white">No inicio de sesión</h4>
        </div>
        <div class="card-body">
            <h5><span class="fa fa-exclamation-triangle"></span> &nbsp; Atención</h5>
            <p>¡Debe iniciar sesión para poder tener acceso!</p>
            <a href="/" class="btn btn-outline-warning">Volver al inicio</a>
        </div>
    </div>
}

@code {
    [Parameter]
    public int VentaId { get; set; }
    bool esACredito = false;
    bool esAContado = false;

    private decimal ITBIS;
    private decimal Balance;
    private decimal LimiteCredito;
    private VentaProductos Venta = new VentaProductos();
    private VentaProductosDetalle Detalle = new VentaProductosDetalle();
    private List<Clientes> ListaClientes = new List<Clientes>();
    private List<Productos> ListaProductos = new List<Productos>();

    public RepositorioBase<Clientes> repositorioClientes = new RepositorioBase<Clientes>();
    public RepositorioBase<Productos> repositorioProductos = new RepositorioBase<Productos>();
    public RepositorioBase<UnidadesMedida> repositorioUnidadesMedida = new RepositorioBase<UnidadesMedida>();
    public VentaProductosBLL repositorioVentas = new VentaProductosBLL();

    public void identificarTipoFactura()
    {
        if (Venta.TipoFactura == 1)//Factura a credito
        {
            esACredito = true;
            esAContado = false;
        }
        else if (Venta.TipoFactura == 2)//Factura a contado
        {
            esAContado = true;
            esACredito = false;
        }
    }

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        ListaClientes = repositorioClientes.GetList(p => true);
        ListaProductos = repositorioProductos.GetList(p => true);
    }

    public void Nuevo()
    {
        Balance = 0;
        LimiteCredito = 0;
        Venta = new VentaProductos();
        Detalle = new VentaProductosDetalle();
        ListaClientes = repositorioClientes.GetList(p => true);
        ListaProductos = repositorioProductos.GetList(p => true);
        Venta.UsuarioId = GetUsuarioId();
    }

    public int GetUsuarioId()
    {
        int id;
        Contexto db = new Contexto();
        id = db.Usuarios.Where(A => A.NombreUsuario.Equals(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name)).Select(A => A.UsuarioId).FirstOrDefault();

        return id;
    }

    public void Buscar()
    {
        if (Venta.VentaId > 0)
        {
            var encontrado = repositorioVentas.Buscar(Venta.VentaId);

            if (encontrado != null)
                this.Venta = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

    public void Guardar()
    {
        bool guardo;

        if (!comprobarProductoEnReorden())
        {
            if (Venta.TipoFactura == 1)//Si la factura es a credito
            {
                if (Venta.Total > (LimiteCredito - Balance))
                {
                    toast.ShowError("El total de la factura excede el límite de crédito del cliente");
                }
                else if (Venta.ClienteId == 1)
                {
                    toast.ShowError("Este cliente no puede realizar compras a crédito");
                }
                else if (Venta.VentaProductosDetalle.Count == 0)
                {
                    toast.ShowError("¡Debe agregar al menos un producto al detalle!");
                }
                else
                {
                    guardo = repositorioVentas.Guardar(Venta, Venta.VentaId);

                    if (guardo)
                    {
                        Nuevo();
                        toast.ShowSuccess("Guardado correctamente");
                    }
                    else
                        toast.ShowError("No fue posible guardar");
                }
            }
            else//Si la factura es a contado
            {
                if (Venta.VentaProductosDetalle.Count == 0)
                {
                    toast.ShowError("¡Debe agregar al menos un producto al detalle!");
                }
                else
                {
                    Clientes cliente = repositorioClientes.Buscar(Venta.ClienteId);
                    cliente.Balance = 0;

                    guardo = repositorioVentas.Guardar(Venta, Venta.VentaId);
                    repositorioClientes.Modificar(cliente);

                    if (guardo)
                    {
                        Nuevo();
                        toast.ShowSuccess("Guardado correctamente");
                    }
                    else
                        toast.ShowError("No fue posible guardar");
                }
            }
        }

    }

    public void Eliminar()
    {
        bool elimino;

        elimino = repositorioVentas.Eliminar(Venta.VentaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    public void CalcularImporte()
    {
        if(Detalle.ProductoId != 0)
        {
            var producto = repositorioProductos.Buscar(Detalle.ProductoId);
            ITBIS = (producto.Precio * Convert.ToDecimal(0.18)) * Detalle.Cantidad;
            Detalle.Importe = (Detalle.Cantidad * Detalle.PrecioUnitario) + ITBIS;
            Detalle.Importe = Math.Round(Detalle.Importe, 2);
        }
    }

    public void LlenarPrecioUnitario()
    {
        if (Detalle.ProductoId == 0)
        {
            return;
        }
        Detalle.PrecioUnitario = repositorioProductos.Buscar(Detalle.ProductoId).Precio;
    }

    public void AgregarDetalle()
    {
        if (Detalle.ProductoId > 0)
        {
            if (Detalle.Cantidad > 0)
            {
                Venta.VentaProductosDetalle.Add(new VentaProductosDetalle
                {
                    VentaId = Venta.VentaId,
                    ProductoId = Detalle.ProductoId,
                    Cantidad = Detalle.Cantidad,
                    PrecioUnitario = Detalle.PrecioUnitario,
                    ITBIS = Math.Round(((Detalle.PrecioUnitario * Convert.ToDecimal(0.18)) * Detalle.Cantidad), 2),
                    Importe = Detalle.Importe
                });

                Venta.Subtotal += (Detalle.Importe - ITBIS);
                Venta.ITBIS += ITBIS;
                Venta.Total += Detalle.Importe;

                Venta.Subtotal = Math.Round(Venta.Subtotal, 2);
                Venta.ITBIS = Math.Round(Venta.ITBIS, 2);
                Venta.Total = Math.Round(Venta.Total, 2);

                Detalle = new VentaProductosDetalle();
            }
            else
            {
                toast.ShowError("¡Debe introducir la cantidad!");
                return;
            }
        }
        else
            toast.ShowError("¡Debe seleccionar un producto!");
    }

    public void RemoverFila(VentaProductosDetalle filaRemovida)
    {
        Venta.Total -= filaRemovida.Importe;
        Venta.VentaProductosDetalle.Remove(filaRemovida);
    }

    public void BuscarBalanceLimiteCredito()
    {
        if (Venta.ClienteId == 0)
        {
            return;
        }
        Balance = repositorioClientes.Buscar(Venta.ClienteId).Balance;
        LimiteCredito = repositorioClientes.Buscar(Venta.ClienteId).LimiteCredito;
    }

    public bool comprobarProductoEnReorden()
    {
        bool paso = false;
        foreach (var item in Venta.VentaProductosDetalle)
        {
            if (repositorioProductos.Buscar(item.ProductoId).CantidadExistente <= repositorioProductos.Buscar(item.ProductoId).CantidadMinima)
            {
                toast.ShowWarning("El producto " + repositorioProductos.Buscar(item.ProductoId).Nombre + " "
                    + repositorioProductos.Buscar(item.ProductoId).Marca + " "
                    + repositorioProductos.Buscar(item.ProductoId).UnidadMedida + " esta en reorden, favor pedir mas.");
                paso = true;
            }
        }
        return paso;
    }

    public void Imprimir()
    {
        if (Venta.VentaId != 0 && Venta.VentaProductosDetalle.Count() > 0)
        {
            FacturaVentaReport facturaVentaReport = new FacturaVentaReport();
            var parametros = new ModalParameters();

            parametros.Add("listaVentaDetalle", Venta.VentaProductosDetalle);
            parametros.Add("venta", Venta);

            modal.Show<FacturaVentaViewer>("Factura de Venta", parametros);
        }
        else
        {
            toast.ShowInfo("Debe guardar la factura para poder imprimirla");
        }
    }
}
