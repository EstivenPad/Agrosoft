@page "/RegistroUsuarios"
@page "/RegistroUsuarios/{UsuarioId:int}"

@using BLL
@using Models

@inject IToastService toast

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    @if (!TipoUsuario)
    {
        <div class="card border-dark text-center">
            <div class="card-header bg-danger text-lg-center" style="border-radius:5px;">
                <h4 style="font-family:Georgia; color:white">Usuario no autorizado</h4>
            </div>
            <div class="card-body">
                <h5><span class="fa fa-exclamation-triangle"></span> &nbsp; Atención</h5>
                <p>¡Sólo un usuario de tipo administrador tiene acceso!</p>
                <a href="/" class="btn btn-outline-warning">Volver al inicio</a>
            </div>
        </div>
    }
    else
    {
        <EditForm Model="Usuario" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <div class="card border-success">
                <div class="card-header bg-success text-lg-center" style="border-radius:5px;">
                    <h3 style="font-family:Georgia; color:white">Registro de usuarios</h3>
                </div>

                <div class="card-body">
                    <form>
                        @*Usuario Id*@
                        <div class="form-row justify-content-between">
                            <div class="col-5">
                                <div class="form-group">
                                    <label>Usuario Id</label>
                                    <div class="input-group">
                                        <InputNumber @bind-Value="Usuario.UsuarioId" min="0" class="form-control col" />
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                                <span class="oi oi-magnifying-glass"> </span>Buscar
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @*Fecha*@
                            <div class="form-group col-4">
                                <label>Fecha</label>
                                <InputDate @bind-Value="Usuario.Fecha" class="form-control" />
                                <ValidationMessage For="@(() => Usuario.Fecha)" />
                            </div>
                        </div>

                        @*Nombres*@
                        <div class="form-group">
                            <label>Nombres</label>
                            <InputText @bind-Value="Usuario.Nombres" class="form-control" />
                            <ValidationMessage For="@(() => Usuario.Nombres)" />
                        </div>

                        @*Apellidos*@
                        <div class="form-group">
                            <label>Apellidos</label>
                            <InputText @bind-Value="Usuario.Apellidos" class="form-control" />
                            <ValidationMessage For="@(() => Usuario.Apellidos)" />
                        </div>

                        <div class="form-row">
                            @*Teléfono*@
                            <div class="form-group col">
                                <label>Teléfono</label>
                                <InputText @bind-Value="Usuario.Telefono" class="form-control" />
                                <ValidationMessage For="@(() => Usuario.Telefono)" />
                            </div>

                            @*Celular*@
                            <div class="form-group col">
                                <label>Celular</label>
                                <InputText @bind-Value="Usuario.Celular" class="form-control" />
                                <ValidationMessage For="@(() => Usuario.Celular)" />
                            </div>
                        </div>

                        @*Email*@
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" @bind="Usuario.Email" class="form-control" />
                            <ValidationMessage For="@(() => Usuario.Email)" />
                        </div>

                        @*Dirección*@
                        <div class="form-group">
                            <label>Dirección</label>
                            <InputText @bind-Value="Usuario.Direccion" class="form-control" />
                            <ValidationMessage For="@(() => Usuario.Direccion)" />
                        </div>

                        <div class="form-row">
                            @*Nombre de Usuario*@
                            <div class="form-group col">
                                <label>Nombre de usuario</label>
                                <InputText @bind-Value="Usuario.NombreUsuario" class="form-control" />
                                <ValidationMessage For="@(() => Usuario.NombreUsuario)" />
                            </div>

                            @*Tipo de Usuario*@
                            <div class="form-group col">
                                <label>Tipo de usuario</label>
                                <InputSelect @bind-Value="Usuario.TipoUsuario" class="form-control">
                                    <option disabled selected>Seleccione una opción</option>
                                    <option>Administrador</option>
                                    <option>Empleado</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => Usuario.TipoUsuario)" />
                            </div>

                            
                        </div> 
                        
                        <div class="form-row">
                            @*Clave de Usuario*@
                            <div class="form-group col">
                                <label>Clave de usuario</label>
                                
                                    <input type="@(mostrarClave? "text" : "password")" @bind="Usuario.ClaveUsuario" class="form-control" />

                                   
                                
                                <ValidationMessage For="@(() => Usuario.ClaveUsuario)" />
                            </div>

                            @*Confirmar clave de Usuario*@
                            <div class="form-group col">
                                <label>Confirmar clave</label>
                                <div class="input-group">
                                    <input type="@(mostrarClave? "text" : "password")" @bind="confirmarClave" class="form-control" @onfocusout="CompararClaves" />

                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-outline-info" @onmousedown="MostrarClave" @onmouseup="OcultarClave">
                                            <span class="fa fa-eye" style="margin-top:2px"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>

                <div class="card-footer">
                    <div class="form-group text-center" display: inline-block>
                        <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"> <span class="oi oi-file"></span> Nuevo </button>
                        <button type="submit" class="btn btn-lg btn-success"> <span class="oi oi-cloud"></span> Guardar </button>
                        <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"> <span class="oi oi-trash"></span> Eliminar </button>
                    </div>
                </div>
            </div>
        </EditForm>
    }
}
else @*Si no ha iniciado sesion*@
{
    <div class="card border-dark text-center">
        <div class="card-header bg-danger text-lg-center" style="border-radius:5px;">
            <h4 style="font-family:Georgia; color:white">No inicio de sesión</h4>
        </div>
        <div class="card-body">
            <h5><span class="fa fa-exclamation-triangle"></span> &nbsp; Atención</h5>
            <p>¡Debe iniciar sesión para poder tener acceso!</p>
            <a href="/" class="btn btn-outline-warning">Volver al inicio</a>
        </div>
    </div>
}

@code {
    [Parameter]
    public int UsuarioId { get; set; }
    private Usuarios Usuario = new Usuarios();
    public UsuariosBLL repositorio = new UsuariosBLL();
    private bool TipoUsuario = false;
    private string confirmarClave;
    private bool mostrarClave;
    private bool ClaveVerificada = false;

    public void MostrarClave()
    {
        mostrarClave = true;
    }

    public void OcultarClave()
    {
        mostrarClave = false;
    }

    public void CompararClaves()
    {
        if (Usuario.ClaveUsuario != Usuario.ClaveConfirmada)
        {
            ClaveVerificada = false;
        }
        else
        {
            ClaveVerificada = true;            
        }
    }

    public bool ValidarClave()
    {
        bool paso = true;
        if(Usuario.ClaveUsuario.Length < 8)
        {
            paso = false;
        }
        return paso;
    }

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        TipoUsuario = GetAuthorization();
    }

    private void Nuevo()
    {
        Usuario = new Usuarios();
    }

    private void Buscar()
    {
        if (Usuario.UsuarioId > 0)
        {
            var encontrado = repositorio.Buscar(Usuario.UsuarioId);

            if (encontrado != null)
                this.Usuario = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

    public void Guardar()
    {
        bool guardo;

        if (ClaveVerificada)
        {
            if (ValidarClave() == true)
            {
                guardo = repositorio.Guardar(Usuario, Usuario.UsuarioId);

                if (guardo)
                {
                    Nuevo();
                    toast.ShowSuccess("Guardado correctamente");
                }
                else
                    toast.ShowError("No fue posible guardar");
            }
            else
            {
                toast.ShowWarning("La contraseña debe tener 8 o mas caracteres");
            }
        }
        else
            toast.ShowWarning("Las contraseñas no coinciden");
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = repositorio.Eliminar(Usuario.UsuarioId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private bool GetAuthorization()
    {
        bool acceso;

        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.IsInRole("Administrador"))
            acceso = true;
        else
            acceso = false;

        return acceso;
    }
}
