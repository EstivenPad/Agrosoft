@page "/RegistroMarcas"
@page "/RegistroMarcas/{MarcaId:int}"

@inject IToastService toast

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <EditForm Model="Marca" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card border-success">
            <div class="card-header bg-success text-lg-center" style="border-radius:5px;">
                <h3 style="font-family:Georgia; color:white">Registro de marcas</h3>
            </div>

            <div class="card-body">
                <form>
                    @*Marca Id*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>Marca Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Marca.MarcaId" class="form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                            <span class="oi oi-magnifying-glass"> </span>Buscar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Descripcion*@
                    <div class="form-group">
                        <label>Descripción</label>
                        <InputText @bind-Value="Marca.Descripcion" class="form-control" />
                        <ValidationMessage For="@(() => Marca.Descripcion)" />
                    </div>
                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"> <span class="oi oi-file"></span> Nuevo </button>
                    <button type="submit" class="btn btn-lg btn-success"> <span class="oi oi-cloud"></span> Guardar </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"> <span class="oi oi-trash"></span> Eliminar </button>
                </div>
            </div>
        </div>
    </EditForm>
}
else @*Si no ha iniciado sesion*@
{
    <div class="card card-shadow text-center">
        <div class="card-header bg-danger text-lg-center" style="border-radius:5px; width:100%">
            <h3 style="font-family:Georgia; color:white">No inicio de sesión</h3>
        </div>
        <div class="card-body" style="margin-top:25%">
            <h4>
                <span class="fa fa-exclamation-triangle" style="color:#ffcc00; font-size:25px"></span> &nbsp; Atención &nbsp;
                <span class="fa fa-exclamation-triangle" style="color:#ffcc00; font-size:25px"></span>
            </h4>
            <h6>¡Debe iniciar sesión para poder tener acceso!</h6>
            
        </div>
        <div class="card card-footer" style="width:100%;">
            <a href="LogInPage" class="btn btn-outline-info" style="border-radius: 10px">
                <span class="fa fa-sign-in-alt"></span> Ir al login
            </a>
        </div>
    </div>
}

@code {
    [Parameter]
    public int MarcaId { get; set; }
    private Marcas Marca { get; set; }
    public RepositorioBase<Marcas> repositorio = new RepositorioBase<Marcas>();

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
    }

    private void Nuevo()
    {
        Marca = new Marcas();
        Marca.UsuarioId = GetUsuarioId();
    }

    public int GetUsuarioId()
    {
        int id;
        Contexto db = new Contexto();
        id = db.Usuarios.Where(A => A.NombreUsuario.Equals(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name)).Select(A => A.UsuarioId).FirstOrDefault();

        return id;
    }

    private void Buscar()
    {
        if (Marca.MarcaId > 0)
        {
            var encontrado = repositorio.Buscar(Marca.MarcaId);

            if (encontrado != null)
                this.Marca = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

    public void Guardar()
    {
        bool guardo;

        guardo = repositorio.Guardar(Marca, Marca.MarcaId);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = repositorio.Eliminar(Marca.MarcaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }
}
