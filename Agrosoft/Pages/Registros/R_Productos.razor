@page "/RegistroProductos"

@using Models
@using BLL

@inject IToastService toast

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <EditForm Model="Producto" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card border-success">
            <div class="card-header bg-success text-lg-center" style="border-radius:5px;">
                <h3 style="font-family:Georgia; color:white">Registro de productos</h3>
            </div>

            <div class="card-body">
                <form>
                    @*Producto id*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>Producto Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Producto.ProductoId " min="0" class="form-control col-4"></InputNumber>
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                            <span class="oi oi-magnifying-glass"> </span> Buscar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Nombre*@
                    <div class="form-group">
                        <label>Nombre</label>
                        <InputText @bind-Value="Producto.Nombre" class="form-control"></InputText>
                        <ValidationMessage For="@(()=>Producto.Nombre)" />
                    </div>

                    @*Marca*@
                    <div class="form-group">
                        <label>Marca</label>
                        <div class="input-group">
                            <select class="form-control" @bind="Producto.Marca">
                                <option disabled selected>Seleccione una opcion</option>
                                @foreach (var item in ListaMarcas)
                                {
                                    <option>@item.Descripcion</option>
                                }
                            </select>
                            <div class="input-group-append">
                                <NavLink type="button" class="btn btn-primary" href="RegistroMarcas">
                                    <i class="oi oi-plus" aria-hidden="true" />
                                </NavLink>
                            </div>
                        </div>
                        <ValidationMessage For="@(()=>Producto.Marca)" />
                    </div>

                    @*Unidad de medida*@
                    <div class="form-group">
                        <label>Unidad de medida</label>
                        <select @bind="Producto.UnidadMedida" class="form-control">
                            <option value="0" disabled>Seleccione una opcion</option>
                            @foreach (var item in ListaUnidades)
                            {
                                <option value=@item.UnidadId>@item.Descripcion</option>
                            }
                        </select>
                        <ValidationMessage For="@(()=>Producto.UnidadMedida)" />
                    </div>

                    @*Cantidad minima*@
                    <div class="form-group">
                        <label>Cantidad minima</label>
                        <InputNumber @bind-Value="Producto.CantidadMinima" min="0" class="form-control"></InputNumber>
                        <ValidationMessage For="@(()=>Producto.CantidadMinima)" />
                    </div>

                    @*Cantidad existente*@
                    <div class="form-group">
                        <label>Cantidad existente</label>
                        <InputNumber @bind-Value="Producto.CantidadExistente" min="0" class="form-control"></InputNumber>
                        <ValidationMessage For="@(()=>Producto.CantidadExistente)" />
                    </div>

                    @*Precio*@
                    <div class="form-group">
                        <label>Precio</label>
                        <InputNumber @bind-Value="Producto.Precio" min="0" class="form-control"></InputNumber>
                        <ValidationMessage For="@(()=>Producto.Precio)" />
                    </div>

                    @*Costo*@
                    <div class="form-group">
                        <label>Costo</label>
                        <InputNumber @bind-Value="Producto.Costo" min="0" class="form-control"></InputNumber>
                        <ValidationMessage For="@(()=>Producto.Costo)" />
                    </div>
                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"> <span class="oi oi-file"></span> Nuevo </button>
                    <button type="submit" class="btn btn-lg btn-success"> <span class="oi oi-cloud"></span> Guardar </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"> <span class="oi oi-trash"></span> Eliminar </button>
                </div>
            </div>

        </div>
    </EditForm>
}
else @*Si no ha iniciado sesion*@
{
    <div class="card border-dark text-center">
        <div class="card-header bg-danger text-lg-center" style="border-radius:5px;">
            <h4 style="font-family:Georgia; color:white">No inicio de sesión</h4>
        </div>
        <div class="card-body">
            <h5><span class="fa fa-exclamation-triangle"></span> &nbsp; Atención</h5>
            <p>¡Debe iniciar sesión para poder tener acceso!</p>
            <a href="/" class="btn btn-outline-warning">Volver al inicio</a>
        </div>
    </div>
}

@code {
    private Productos Producto = new Productos();
    List<UnidadesMedida> ListaUnidades = new List<UnidadesMedida>();
    List<Marcas> ListaMarcas = new List<Marcas>();
    RepositorioBase<Productos> repositorioProductos = new RepositorioBase<Productos>();
    RepositorioBase<UnidadesMedida> repositorioUnidades = new RepositorioBase<UnidadesMedida>();
    RepositorioBase<Marcas> repositorioMarcas = new RepositorioBase<Marcas>();

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        CargarUnidades();
        CargarMarcas();
    }

    public void Nuevo()
    {
        Producto = new Productos();
    }

    private void CargarUnidades()
    {
        ListaUnidades = repositorioUnidades.GetList(x => true);
    }

    private void CargarMarcas()
    {
        ListaMarcas = repositorioMarcas.GetList(x => true);
    }

    private void Buscar()
    {
        if (Producto.ProductoId > 0)
        {
            var encontrado = repositorioProductos.Buscar(Producto.ProductoId);

            if (encontrado != null)
                this.Producto = encontrado;
            else
            {
                Nuevo();
                toast.ShowWarning("¡No encontrado!");
            }
        }
    }

    public void Guardar()
    {
        bool paso;
        paso = repositorioProductos.Guardar(Producto, Producto.ProductoId);

        if (Producto.CantidadExistente < Producto.CantidadMinima)
        {
            toast.ShowError("¡La cantidad en existencia no puede ser menor a la cantidad minima!");
            return;
        }
        else
        {
            if (paso)
            {
                Nuevo();
                toast.ShowSuccess("¡Guardado con éxito!");
            }
            else
                toast.ShowError("¡No se pudo guardar!");
        }
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = repositorioProductos.Eliminar(Producto.ProductoId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("¡Eliminado con exito!");
        }
        else
            toast.ShowSuccess("¡No se pudo eliminar!");
    }

}