@page "/RegistroCobros"

@using Models
@using BLL

@inject IToastService toast

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <EditForm Model="Cobro" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card border-success">
            <div class="card-header bg-success text-lg-center" style="border-radius:5px;">
                <h3 style="font-family:Georgia; color:white">Registro de cobros</h3>
            </div>

            <div class="card-body">
                <form>
                    @*CobroId*@
                    <div class="form-row justify-content-between">
                        <div class="col-5">
                            <div class="form-group">
                                <label>Cobro Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Cobro.CobroId" min="0" class="form-control col" />
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                            <span class="oi oi-magnifying-glass"> </span>Buscar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @*Fecha*@
                        <div class="form-group col-4">
                            <label>Fecha</label>
                            <InputDate @bind-Value="Cobro.Fecha" class="form-control" />
                            <ValidationMessage For="@(() => Cobro.Fecha)" />
                        </div>
                    </div>

                    @*Cliente*@
                    <div class="form-group">
                        <label>Cliente</label>
                        <div class="input-group">
                            <select class="form-control" @bind="Cobro.ClienteId" @onclick="LLenarBalance">
                                <option value="0" disabled>Seleccione una opcion</option>
                                @foreach (var item in ListaClientes)
                                {
                                    <option value="@item.ClienteId">@(item.Nombres + " " + item.Apellidos)</option>
                                }
                            </select>
                            <div class="input-group-append">
                                <NavLink type="button" class="btn btn-primary" href="RegistroClientes">
                                    <i class="oi oi-plus" aria-hidden="true" />
                                </NavLink>
                            </div>
                        </div>
                        <ValidationMessage For="@(()=>Cobro.ClienteId)" />
                    </div>

                    @*Deposito*@
                    <div class="form-group">
                        <label>Deposito</label>
                        <InputNumber @bind-Value="Cobro.Deposito" min="0" class="form-control" readOnly="@noSePuedeDepositar" @onclick="CalcularBalance" @onfocusout="CalcularBalance"></InputNumber>
                        <ValidationMessage For="@(()=>Cobro.Deposito)" />
                    </div>

                    @*Limite de credito*@
                    <div class="form-group">
                        <label>Límite de crédito</label>
                        <InputNumber @bind-Value="LimiteCredito" min="0" class="form-control" readOnly="true"></InputNumber>
                    </div>

                    @*Balance*@
                    <div class="form-group">
                        <label>Balance</label>
                        <InputNumber @bind-Value="Balance" class="form-control" readOnly="true"></InputNumber>
                    </div>

                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"> <span class="oi oi-file"></span> Nuevo </button>
                    <button type="submit" class="btn btn-lg btn-success"> <span class="oi oi-cloud"></span> Guardar </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"> <span class="oi oi-trash"></span> Eliminar </button>
                </div>
            </div>
        </div>
    </EditForm>
}
else @*Si no ha iniciado sesion*@
{
    <div class="card card-shadow text-center">
        <div class="card-header bg-danger text-lg-center" style="border-radius:5px; width:100%">
            <h3 style="font-family:Georgia; color:white">No inicio de sesión</h3>
        </div>
        <div class="card-body" style="margin-top:25%">
            <h4>
                <span class="fa fa-exclamation-triangle" style="color:#ffcc00; font-size:25px"></span> &nbsp; Atención &nbsp;
                <span class="fa fa-exclamation-triangle" style="color:#ffcc00; font-size:25px"></span>
            </h4>
            <h6>¡Debe iniciar sesión para poder tener acceso!</h6>
            
        </div>
        <div class="card card-footer" style="width:100%;">
            <a href="LogInPage" class="btn btn-outline-info" style="border-radius: 10px">
                <span class="fa fa-sign-in-alt"></span> Ir al login
            </a>
        </div>
    </div>
}

@code {
    Cobros Cobro = new Cobros();
    private List<Clientes> ListaClientes = new List<Clientes>();
    RepositorioBase<Clientes> repositorioClientes = new RepositorioBase<Clientes>();
    CobrosBLL repositorioCobros = new CobrosBLL();

    decimal Balance;
    decimal LimiteCredito;
    bool noSePuedeDepositar;

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
        CargarClientes();
        noSePuedeDepositar = true;
    }

    public void LLenarBalance()
    {
        if (Cobro.ClienteId == 0)
            return;

        Balance = repositorioClientes.Buscar(Cobro.ClienteId).Balance;

        if (Balance > 0)
        {
            noSePuedeDepositar = false;
        }
        else
            noSePuedeDepositar = true;

        LlenarLimiteCredito();
    }

    public void LlenarLimiteCredito()
    {
        LimiteCredito = repositorioClientes.Buscar(Cobro.ClienteId).LimiteCredito;
    }

    public void CargarClientes()
    {
        ListaClientes = repositorioClientes.GetList(p => true);
    }

    private void Nuevo()
    {
        this.Cobro = new Cobros();
        Cobro.UsuarioId = GetUsuarioId();
        LimiteCredito = 0;
        Balance = 0;
    }

    public int GetUsuarioId()
    {
        int id;
        Contexto db = new Contexto();
        id = db.Usuarios.Where(A => A.NombreUsuario.Equals(AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name)).Select(A => A.UsuarioId).FirstOrDefault();

        return id;
    }

    private void Buscar()
    {
        if (Cobro.CobroId > 0)
        {
            var encontrado = repositorioCobros.Buscar(Cobro.CobroId);

            if (encontrado != null)
            {
                this.Cobro = encontrado;
                Balance = repositorioClientes.Buscar(repositorioCobros.Buscar(Cobro.CobroId).ClienteId).Balance;
                LimiteCredito = repositorioClientes.Buscar(repositorioCobros.Buscar(Cobro.CobroId).ClienteId).LimiteCredito;
                if (Balance > 0)
                {
                    noSePuedeDepositar = false;
                }
                else
                    noSePuedeDepositar = true;
            }
            else
                toast.ShowWarning("¡No encontrado!");
        }
    }

    private void Guardar()
    {
        bool guardo;

        guardo = repositorioCobros.Guardar(Cobro, Cobro.CobroId);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("¡Guardado!");
        }
        else
            toast.ShowError("¡No Guardado!");
    }

    private void Eliminar()
    {
        bool eliminar;

        eliminar = repositorioCobros.Eliminar(Cobro.CobroId);

        if (eliminar)
        {
            Nuevo();
            toast.ShowSuccess("¡Eliminado!");
        }
        else
            toast.ShowError("¡No eliminado!");
    }

    private void CalcularBalance()
    {
        Balance = repositorioClientes.Buscar(Cobro.ClienteId).Balance - Cobro.Deposito;
    }
}