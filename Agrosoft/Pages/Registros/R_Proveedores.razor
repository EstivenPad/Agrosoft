@page "/RegistroProveedores"

@using Models
@using BLL

@inject IToastService toast

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
    <EditForm Model="Proveedor" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card border-success">
            <div class="card-header bg-success text-lg-center" style="border-radius:5px;">
                <h3 style="font-family:Georgia; color:white">Registro de proveedores</h3>
            </div>

            <div class="card-body">
                <form>
                    @*Proveedor id*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>Proveedor Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Proveedor.ProveedorId " min="0" class="form-control col-4"></InputNumber>
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                                            <span class="oi oi-magnifying-glass"> </span> Buscar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Fecha*@
                    <div class="form-group">
                        <label>Fecha</label>
                        <InputDate @bind-Value="Proveedor.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => Proveedor.Fecha)" />
                    </div>

                    @*Nombre*@
                    <div class="form-group">
                        <label>Nombre</label>
                        <InputText @bind-Value="Proveedor.Nombres" class="form-control"></InputText>
                        <ValidationMessage For="@(() => Proveedor.Nombres)" />
                    </div>

                    @*Apellidos*@
                    <div class="form-group">
                        <label>Apellido</label>
                        <InputText @bind-Value="Proveedor.Apellidos" class="form-control"></InputText>
                        <ValidationMessage For="@(() => Proveedor.Apellidos)" />
                    </div>

                    @*Teléfono*@
                    <div class="form-group">
                        <label>Teléfono</label>
                        <InputText @bind-Value="Proveedor.Telefono" class="form-control" />
                        <ValidationMessage For="@(() => Proveedor.Telefono)" />
                    </div>

                    @*Celular*@
                    <div class="form-group">
                        <label>Celular</label>
                        <InputText @bind-Value="Proveedor.Celular" class="form-control" />
                        <ValidationMessage For="@(() => Proveedor.Celular)" />
                    </div>

                    @*RNC*@
                    <div class="form-group">
                        <label>RNC</label>
                        <InputNumber @bind-Value="Proveedor.Rnc" class="form-control" />
                        <ValidationMessage For="@(() => Proveedor.Rnc)" />
                    </div>

                    @*Email*@
                    <div class="form-group">
                        <label>Email</label>
                        <input type="email" @bind="Proveedor.Email" class="form-control" />
                        <ValidationMessage For="@(() => Proveedor.Email)" />
                    </div>

                    @*Dirección*@
                    <div class="form-group">
                        <label>Dirección</label>
                        <InputText @bind-Value="Proveedor.Direccion" class="form-control" />
                        <ValidationMessage For="@(() => Proveedor.Direccion)" />
                    </div>
                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"> <span class="oi oi-file"></span> Nuevo </button>
                    <button type="submit" class="btn btn-lg btn-success"> <span class="oi oi-cloud"></span> Guardar </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"> <span class="oi oi-trash"></span> Eliminar </button>
                </div>
            </div>

        </div>
    </EditForm>
}
else @*Si no ha iniciado sesion*@
{
    <div class="card border-dark text-center">
        <div class="card-header bg-danger text-lg-center" style="border-radius:5px;">
            <h4 style="font-family:Georgia; color:white">No inicio de sesión</h4>
        </div>
        <div class="card-body">
            <h5><span class="fa fa-exclamation-triangle"></span> &nbsp; Atención</h5>
            <p>¡Debe iniciar sesión para poder tener acceso!</p>
            <a href="/" class="btn btn-outline-warning">Volver al inicio</a>
        </div>
    </div>
}

@code {
    private Proveedores Proveedor = new Proveedores();
    public RepositorioBase<Proveedores> repositorio = new RepositorioBase<Proveedores>();

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
    }

    public void Nuevo()
    {
        Proveedor = new Proveedores();
        Proveedor.UsuarioId = LoginModel.UsuarioId;
    }

    private void Buscar()
    {
        if (Proveedor.ProveedorId > 0)
        {
            var encontrado = repositorio.Buscar(Proveedor.ProveedorId);

            if (encontrado != null)
                this.Proveedor = encontrado;
            else
            {
                Nuevo();
                toast.ShowWarning("¡No encontrado!");
            }
        }
    }

    public void Guardar()
    {
        bool paso;
        paso = repositorio.Guardar(Proveedor, Proveedor.ProveedorId);

        if (paso)
        {
            Nuevo();
            toast.ShowSuccess("¡Guardado con éxito!");
        }
        else
            toast.ShowError("¡No se pudo guardar!");
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = repositorio.Eliminar(Proveedor.ProveedorId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("¡Eliminado con exito!");
        }
        else
            toast.ShowSuccess("¡No se pudo eliminar!");
    }
}
